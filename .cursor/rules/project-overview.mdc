# Dify 项目架构概览

Dify是一个开源的LLM应用开发平台，采用前后端分离架构。

## 🏗️ 项目结构

```
dify/
├── api/          # 后端API服务 (Python Flask)
├── web/          # 前端应用 (Next.js + React)
├── docker/       # Docker配置
└── docker_db/    # 数据库配置
```

## 🔧 技术栈

### 后端 ([api/](mdc:api/))
- **框架**: Flask 3.1.0 + SQLAlchemy 2.0.29
- **数据库**: PostgreSQL + Redis + 向量数据库(Weaviate/Chroma等)
- **任务队列**: Celery
- **认证**: JWT + Flask-Login
- **AI集成**: OpenAI, Anthropic, Langchain等
- **文件存储**: 支持多种云存储(S3, Azure, GCP等)

### 前端 ([web/](mdc:web/))
- **框架**: Next.js 15 + React 19 + TypeScript
- **样式**: TailwindCSS + PostCSS
- **状态管理**: Zustand + SWR/React-Query
- **表单**: React Hook Form + Zod验证
- **UI组件**: Headless UI + 自定义组件
- **国际化**: i18next

## 📁 核心目录说明

### 后端核心模块
- [`api/core/`](mdc:api/core/) - 核心业务逻辑
- [`api/controllers/`](mdc:api/controllers/) - API路由控制器
- [`api/services/`](mdc:api/services/) - 业务服务层
- [`api/models/`](mdc:api/models/) - 数据模型
- [`api/configs/`](mdc:api/configs/) - 配置管理

### 前端核心模块
- [`web/app/`](mdc:web/app/) - Next.js应用页面
- [`web/components/`](mdc:web/app/components/) - 通用组件
- [`web/service/`](mdc:web/service/) - API服务层
- [`web/context/`](mdc:web/context/) - React上下文
- [`web/hooks/`](mdc:web/hooks/) - 自定义Hooks

## 🎯 开发原则
1. **代码逻辑简洁**：避免过度复杂的设计，但要防范逻辑漏洞
2. **类型安全**：后端使用Pydantic，前端使用TypeScript
3. **组件化**：前端采用组件化开发，后端采用服务化架构
4. **国际化支持**：所有用户界面文本需要国际化
5. **错误处理**：统一的错误处理和用户友好的错误提示
description: 项目架构规则
globs:
alwaysApply: false
---
